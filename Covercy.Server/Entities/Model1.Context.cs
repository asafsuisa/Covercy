//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CovercyBankEntities : DbContext
    {
        public CovercyBankEntities()
            : base("name=CovercyBankEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<BankAccount> getAllBankAccounts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BankAccount>("getAllBankAccounts");
        }
    
        public virtual ObjectResult<BankAccount> createBankAccount(string name, Nullable<decimal> balance, Nullable<int> currency)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("balance", balance) :
                new ObjectParameter("balance", typeof(decimal));
    
            var currencyParameter = currency.HasValue ?
                new ObjectParameter("currency", currency) :
                new ObjectParameter("currency", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BankAccount>("createBankAccount", nameParameter, balanceParameter, currencyParameter);
        }
    
        public virtual ObjectResult<Currency> createCurrency(string name, string symbol, string iso)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var symbolParameter = symbol != null ?
                new ObjectParameter("symbol", symbol) :
                new ObjectParameter("symbol", typeof(string));
    
            var isoParameter = iso != null ?
                new ObjectParameter("iso", iso) :
                new ObjectParameter("iso", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Currency>("createCurrency", nameParameter, symbolParameter, isoParameter);
        }
    
        public virtual ObjectResult<CurrencyPair> createCurrencyPair(Nullable<int> saleCurrency, Nullable<int> buyCurrency, Nullable<decimal> midMarketRate, string display)
        {
            var saleCurrencyParameter = saleCurrency.HasValue ?
                new ObjectParameter("saleCurrency", saleCurrency) :
                new ObjectParameter("saleCurrency", typeof(int));
    
            var buyCurrencyParameter = buyCurrency.HasValue ?
                new ObjectParameter("buyCurrency", buyCurrency) :
                new ObjectParameter("buyCurrency", typeof(int));
    
            var midMarketRateParameter = midMarketRate.HasValue ?
                new ObjectParameter("midMarketRate", midMarketRate) :
                new ObjectParameter("midMarketRate", typeof(decimal));
    
            var displayParameter = display != null ?
                new ObjectParameter("display", display) :
                new ObjectParameter("display", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CurrencyPair>("createCurrencyPair", saleCurrencyParameter, buyCurrencyParameter, midMarketRateParameter, displayParameter);
        }
    
        public virtual int deleteBankAccount(Nullable<int> accountID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteBankAccount", accountIDParameter);
        }
    
        public virtual int deleteCurrency(Nullable<int> currencyID)
        {
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("currencyID", currencyID) :
                new ObjectParameter("currencyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteCurrency", currencyIDParameter);
        }
    
        public virtual int deleteCurrencyPair(Nullable<int> saleCurrency, Nullable<int> buyCurrency)
        {
            var saleCurrencyParameter = saleCurrency.HasValue ?
                new ObjectParameter("saleCurrency", saleCurrency) :
                new ObjectParameter("saleCurrency", typeof(int));
    
            var buyCurrencyParameter = buyCurrency.HasValue ?
                new ObjectParameter("buyCurrency", buyCurrency) :
                new ObjectParameter("buyCurrency", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteCurrencyPair", saleCurrencyParameter, buyCurrencyParameter);
        }
    
        public virtual ObjectResult<Currency> getAllCurrency()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Currency>("getAllCurrency");
        }
    
        public virtual ObjectResult<CurrencyPair> getAllCurrencyPair()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CurrencyPair>("getAllCurrencyPair");
        }
    
        public virtual ObjectResult<BankAccount> updateBankAccount(Nullable<int> accountID, string name, Nullable<decimal> balance, Nullable<int> currency)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("balance", balance) :
                new ObjectParameter("balance", typeof(decimal));
    
            var currencyParameter = currency.HasValue ?
                new ObjectParameter("currency", currency) :
                new ObjectParameter("currency", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BankAccount>("updateBankAccount", accountIDParameter, nameParameter, balanceParameter, currencyParameter);
        }
    
        public virtual ObjectResult<Currency> updateCurrency(Nullable<int> currencyID, string name, string symbol, string iso)
        {
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("currencyID", currencyID) :
                new ObjectParameter("currencyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var symbolParameter = symbol != null ?
                new ObjectParameter("symbol", symbol) :
                new ObjectParameter("symbol", typeof(string));
    
            var isoParameter = iso != null ?
                new ObjectParameter("iso", iso) :
                new ObjectParameter("iso", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Currency>("updateCurrency", currencyIDParameter, nameParameter, symbolParameter, isoParameter);
        }
    
        public virtual ObjectResult<CurrencyPair> updateCurrencyPair(Nullable<int> saleCurrency, Nullable<int> buyCurrency, Nullable<decimal> midMarketRate, string display)
        {
            var saleCurrencyParameter = saleCurrency.HasValue ?
                new ObjectParameter("saleCurrency", saleCurrency) :
                new ObjectParameter("saleCurrency", typeof(int));
    
            var buyCurrencyParameter = buyCurrency.HasValue ?
                new ObjectParameter("buyCurrency", buyCurrency) :
                new ObjectParameter("buyCurrency", typeof(int));
    
            var midMarketRateParameter = midMarketRate.HasValue ?
                new ObjectParameter("midMarketRate", midMarketRate) :
                new ObjectParameter("midMarketRate", typeof(decimal));
    
            var displayParameter = display != null ?
                new ObjectParameter("display", display) :
                new ObjectParameter("display", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CurrencyPair>("updateCurrencyPair", saleCurrencyParameter, buyCurrencyParameter, midMarketRateParameter, displayParameter);
        }
    
        public virtual ObjectResult<Transaction> getAllTransactions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Transaction>("getAllTransactions");
        }
    
        public virtual int insertTransaction(Nullable<int> saleCurrency, Nullable<decimal> amount, Nullable<int> buyCurrency)
        {
            var saleCurrencyParameter = saleCurrency.HasValue ?
                new ObjectParameter("saleCurrency", saleCurrency) :
                new ObjectParameter("saleCurrency", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var buyCurrencyParameter = buyCurrency.HasValue ?
                new ObjectParameter("buyCurrency", buyCurrency) :
                new ObjectParameter("buyCurrency", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertTransaction", saleCurrencyParameter, amountParameter, buyCurrencyParameter);
        }
    
        public virtual ObjectResult<CurrencyPairsWithIso> getCurrencyPairsWithIso()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CurrencyPairsWithIso>("getCurrencyPairsWithIso");
        }
    
        public virtual int updateCurrencyPairMarketRate(Nullable<int> saleCurrency, Nullable<int> buyCurrency, Nullable<decimal> midMarketRate)
        {
            var saleCurrencyParameter = saleCurrency.HasValue ?
                new ObjectParameter("saleCurrency", saleCurrency) :
                new ObjectParameter("saleCurrency", typeof(int));
    
            var buyCurrencyParameter = buyCurrency.HasValue ?
                new ObjectParameter("buyCurrency", buyCurrency) :
                new ObjectParameter("buyCurrency", typeof(int));
    
            var midMarketRateParameter = midMarketRate.HasValue ?
                new ObjectParameter("midMarketRate", midMarketRate) :
                new ObjectParameter("midMarketRate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateCurrencyPairMarketRate", saleCurrencyParameter, buyCurrencyParameter, midMarketRateParameter);
        }
    
        public virtual ObjectResult<BankAccount> getCurrencyAmount(Nullable<int> currencyId)
        {
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("currencyId", currencyId) :
                new ObjectParameter("currencyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BankAccount>("getCurrencyAmount", currencyIdParameter);
        }
    }
}
